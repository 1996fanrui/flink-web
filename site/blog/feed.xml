<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Flink Blog Feed</title>
<description>Flink Blog</description>
<link>http://flink.apache.org/blog</link>
<atom:link href="http://flink.apache.org/blog/feed.xml" rel="self" type="application/rss+xml" />

<item>
<title>January 2015 in the Flink community</title>
<description>&lt;p&gt;Happy 2015! Here is a (hopefully digestible) summary of what happened last month in the Flink community.&lt;/p&gt;

&lt;h3 id=&quot;0.8.0-release&quot;&gt;0.8.0 release&lt;/h3&gt;

&lt;p&gt;Flink 0.8.0 was released. See &lt;a href=&quot;http://flink.apache.org/news/2015/01/21/release-0.8.html&quot;&gt;here&lt;/a&gt; for the release notes.&lt;/p&gt;

&lt;h3 id=&quot;flink-roadmap&quot;&gt;Flink roadmap&lt;/h3&gt;

&lt;p&gt;The community has published a &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/Flink+Roadmap&quot;&gt;roadmap for 2015&lt;/a&gt; on the Flink wiki. Check it out to see what is coming up in Flink, and pick up an issue to contribute!&lt;/p&gt;

&lt;h3 id=&quot;scaling-als&quot;&gt;Scaling ALS&lt;/h3&gt;

&lt;p&gt;Flink committers employed at &lt;a href=&quot;http://data-artisans.com&quot;&gt;data Artisans&lt;/a&gt; published a &lt;a href=&quot;http://data-artisans.com/computing-recommendations-with-flink.html&quot;&gt;blog post&lt;/a&gt; on how they scaled matrix factorization with Flink and Google Compute Engine to matrices with 28 billion elements.&lt;/p&gt;

&lt;h3 id=&quot;articles-in-the-press&quot;&gt;Articles in the press&lt;/h3&gt;

&lt;p&gt;The Apache Software Foundation &lt;a href=&quot;https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces69&quot;&gt;announced&lt;/a&gt; Flink as a Top-Level Project. The announcement was picked up by the media, e.g., &lt;a href=&quot;http://sdtimes.com/inside-apache-software-foundations-newest-top-level-project-apache-flink/?utm_content=11232092&amp;amp;utm_medium=social&amp;amp;utm_source=twitter&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://www.datanami.com/2015/01/12/apache-flink-takes-route-distributed-data-processing/&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;http://i-programmer.info/news/197-data-mining/8176-flink-reaches-top-level-status.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;hadoop-summit&quot;&gt;Hadoop Summit&lt;/h3&gt;

&lt;p&gt;A submitted abstract on Flink Streaming &lt;a href=&quot;http://2015.hadoopsummit.org/amsterdam-blog/announcing-the-community-vote-session-winners-for-the-2015-hadoop-summit-europe/&quot;&gt;won the community&lt;/a&gt; vote at “The Future of Hadoop” track.&lt;/p&gt;

&lt;h3 id=&quot;meetups-and-talks&quot;&gt;Meetups and talks&lt;/h3&gt;

&lt;p&gt;Flink was presented at the &lt;a href=&quot;http://www.meetup.com/Hadoop-User-Group-France/events/219778022/&quot;&gt;Paris Hadoop User Group&lt;/a&gt;, the &lt;a href=&quot;http://www.meetup.com/hadoop/events/167785202/&quot;&gt;Bay Area Hadoop User Group&lt;/a&gt;, the &lt;a href=&quot;http://www.meetup.com/Apache-Tez-User-Group/events/219302692/&quot;&gt;Apache Tez User Group&lt;/a&gt;, and &lt;a href=&quot;https://fosdem.org/2015/schedule/track/graph_processing/&quot;&gt;FOSDEM 2015&lt;/a&gt;. The January &lt;a href=&quot;http://www.meetup.com/Apache-Flink-Meetup/events/219639984/&quot;&gt;Flink meetup in Berlin&lt;/a&gt; had talks on recent community updates and new features.&lt;/p&gt;

&lt;h2 id=&quot;notable-code-contributions&quot;&gt;Notable code contributions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Code contributions listed here may not be part of a release or even the Flink master repository yet.&lt;/p&gt;

&lt;h3 id=&quot;using-off-heap-memory&quot;&gt;&lt;a href=&quot;https://github.com/apache/flink/pull/290&quot;&gt;Using off-heap memory&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This pull request enables Flink to use off-heap memory for its internal memory uses (sort, hash, caching of intermediate data sets). &lt;/p&gt;

&lt;h3 id=&quot;gelly,-flink’s-graph-api&quot;&gt;&lt;a href=&quot;https://github.com/apache/flink/pull/335&quot;&gt;Gelly, Flink’s Graph API&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This pull request introduces Gelly, Flink’s brand new Graph API. Gelly offers a native graph programming abstraction with functionality for vertex-centric programming, as well as available graph algorithms. See &lt;a href=&quot;http://www.slideshare.net/vkalavri/largescale-graph-processing-with-apache-flink-graphdevroom-fosdem15&quot;&gt;this slide set&lt;/a&gt; for an overview of Gelly.&lt;/p&gt;

&lt;h3 id=&quot;semantic-annotations&quot;&gt;&lt;a href=&quot;https://github.com/apache/flink/pull/311&quot;&gt;Semantic annotations&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Semantic annotations are a powerful mechanism to expose information about the behavior of Flink functions to Flink’s optimizer. The optimizer can leverage this information to generate more efficient execution plans. For example the output of a Reduce operator that groups on the second field of a tuple is still partitioned on that field if the Reduce function does not modify the value of the second field. By exposing this information to the optimizer, the optimizer can generate plans that avoid expensive data shuffling and reuse the partitioned output of Reduce. Semantic annotations can be defined for most data types, including (nested) tuples and POJOs. See the snapshot documentation for details (not online yet).&lt;/p&gt;

&lt;h3 id=&quot;new-yarn-client&quot;&gt;&lt;a href=&quot;https://github.com/apache/flink/pull/292&quot;&gt;New YARN client&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The improved YARN client of Flink now allows users to deploy Flink on YARN for executing a single job. Older versions only supported a long-running YARN session. The code of the YARN client has been refactored to provide an (internal) Java API for controlling YARN clusters more easily.&lt;/p&gt;
</description>
<pubDate>Wed, 04 Feb 2015 11:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2015/02/04/january-in-flink.html</link>
<guid isPermaLink="true">/news/2015/02/04/january-in-flink.html</guid>
</item>

<item>
<title>Apache Flink 0.8.0 available</title>
<description>&lt;p&gt;We are pleased to announce the availability of Flink 0.8.0. This release includes new user-facing features as well as performance and bug fixes, extends the support for filesystems and introduces the Scala API and flexible windowing semantics for Flink Streaming. A total of 33 people have contributed to this release, a big thanks to all of them!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.apache.org/dyn/closer.cgi/flink/flink-0.8.0/flink-0.8.0-bin-hadoop2.tgz&quot;&gt;Download Flink 0.8.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;amp;version=12328699&quot;&gt;See the release changelog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview-of-major-new-features&quot;&gt;Overview of major new features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extended filesystem support&lt;/strong&gt;: The former &lt;code&gt;DistributedFileSystem&lt;/code&gt; interface has been generalized to &lt;code&gt;HadoopFileSystem&lt;/code&gt; now supporting all sub classes of &lt;code&gt;org.apache.hadoop.fs.FileSystem&lt;/code&gt;. This allows users to use all file systems supported by Hadoop with Apache Flink.
&lt;a href=&quot;http://flink.incubator.apache.org/docs/0.8/example_connectors.html&quot;&gt;See connecting to other systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Streaming Scala API&lt;/strong&gt;: As an alternative to the existing Java API Streaming is now also programmable in Scala. The Java and Scala APIs have now the same syntax and transformations and will be kept from now on in sync in every future release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Streaming windowing semantics&lt;/strong&gt;: The new windowing api offers an expressive way to define custom logic for triggering the execution of a stream window and removing elements. The new features include out-of-the-box support for windows based in logical or physical time and data-driven properties on the events themselves among others. &lt;a href=&quot;http://flink.apache.org/docs/0.8/streaming_guide.html#window-operators&quot;&gt;Read more here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mutable and immutable objects in runtime&lt;/strong&gt; All Flink versions before 0.8.0 were always passing the same objects to functions written by users. This is a common performance optimization, also used in other systems such as Hadoop.
However, this is error-prone for new users because one has to carefully check that references to the object aren’t kept in the user function. Starting from 0.8.0, Flink allows to configure a mode which is disabling that mechanism.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance and usability improvements&lt;/strong&gt;: The new Apache Flink 0.8.0 release brings several new features which will significantly improve the performance and the usability of the system. Amongst others, these features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved input split assignment which maximizes computation locality&lt;/li&gt;
&lt;li&gt;Smart broadcasting mechanism which minimizes network I/O&lt;/li&gt;
&lt;li&gt;Custom partitioners which let the user control how the data is partitioned within the cluster. This helps to prevent data skewness and allows to implement highly efficient algorithms.&lt;/li&gt;
&lt;li&gt;coGroup operator now supports group sorting for its inputs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kryo is the new fallback serializer&lt;/strong&gt;: Apache Flink has a sophisticated type analysis and serialization framework that is able to handle commonly used types very efficiently.
In addition to that, there is a fallback serializer for types which are not supported. Older versions of Flink used the reflective &lt;a href=&quot;http://avro.apache.org/&quot;&gt;Avro&lt;/a&gt; serializer for that purpose. With this release, Flink is using the powerful &lt;a href=&quot;https://github.com/EsotericSoftware/kryo&quot;&gt;Kryo&lt;/a&gt; and twitter-chill library for support of types such as Java Collections and Scala specifc types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hadoop 2.2.0+ is now the default Hadoop dependency&lt;/strong&gt;: With Flink 0.8.0 we made the “hadoop2” build profile the default build for Flink. This means that all users using Hadoop 1 (0.2X or 1.2.X versions) have to specify  version “0.8.0-hadoop1” in their pom files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HBase module updated&lt;/strong&gt; The HBase version has been updated to 0.98.6.1. Also, Hbase is now available to the Hadoop1 and Hadoop2 profile of Flink.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Marton Balassi&lt;/li&gt;
&lt;li&gt;Daniel Bali&lt;/li&gt;
&lt;li&gt;Carsten Brandt&lt;/li&gt;
&lt;li&gt;Moritz Borgmann&lt;/li&gt;
&lt;li&gt;Stefan Bunk&lt;/li&gt;
&lt;li&gt;Paris Carbone&lt;/li&gt;
&lt;li&gt;Ufuk Celebi&lt;/li&gt;
&lt;li&gt;Nils Engelbach &lt;/li&gt;
&lt;li&gt;Stephan Ewen&lt;/li&gt;
&lt;li&gt;Gyula Fora&lt;/li&gt;
&lt;li&gt;Gabor Hermann&lt;/li&gt;
&lt;li&gt;Fabian Hueske&lt;/li&gt;
&lt;li&gt;Vasiliki Kalavri&lt;/li&gt;
&lt;li&gt;Johannes Kirschnick&lt;/li&gt;
&lt;li&gt;Aljoscha Krettek&lt;/li&gt;
&lt;li&gt;Suneel Marthi&lt;/li&gt;
&lt;li&gt;Robert Metzger&lt;/li&gt;
&lt;li&gt;Felix Neutatz&lt;/li&gt;
&lt;li&gt;Chiwan Park&lt;/li&gt;
&lt;li&gt;Flavio Pompermaier&lt;/li&gt;
&lt;li&gt;Mingliang Qi&lt;/li&gt;
&lt;li&gt;Shiva Teja Reddy&lt;/li&gt;
&lt;li&gt;Till Rohrmann&lt;/li&gt;
&lt;li&gt;Henry Saputra&lt;/li&gt;
&lt;li&gt;Kousuke Saruta&lt;/li&gt;
&lt;li&gt;Chesney Schepler&lt;/li&gt;
&lt;li&gt;Erich Schubert&lt;/li&gt;
&lt;li&gt;Peter Szabo&lt;/li&gt;
&lt;li&gt;Jonas Traub&lt;/li&gt;
&lt;li&gt;Kostas Tzoumas&lt;/li&gt;
&lt;li&gt;Timo Walther&lt;/li&gt;
&lt;li&gt;Daniel Warneke&lt;/li&gt;
&lt;li&gt;Chen Xu&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 21 Jan 2015 11:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2015/01/21/release-0.8.html</link>
<guid isPermaLink="true">/news/2015/01/21/release-0.8.html</guid>
</item>

<item>
<title>December 2014 in the Flink community</title>
<description>&lt;p&gt;This is the first blog post of a “newsletter” like series where we give a summary of the monthly activity in the Flink community. As the Flink project grows, this can serve as a &amp;quot;tl;dr&amp;quot; for people that are not following the Flink dev and user mailing lists, or those that are simply overwhelmed by the traffic.&lt;/p&gt;

&lt;h3 id=&quot;flink-graduation&quot;&gt;Flink graduation&lt;/h3&gt;

&lt;p&gt;The biggest news is that the Apache board approved Flink as a top-level Apache project! The Flink team is working closely with the Apache press team for an official announcement, so stay tuned for details!&lt;/p&gt;

&lt;h3 id=&quot;new-flink-website&quot;&gt;New Flink website&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://flink.apache.org&quot;&gt;Flink website&lt;/a&gt; got a total make-over, both in terms of appearance and content.&lt;/p&gt;

&lt;h3 id=&quot;flink-irc-channel&quot;&gt;Flink IRC channel&lt;/h3&gt;

&lt;p&gt;A new IRC channel called #flink was created at irc.freenode.org. An easy way to access the IRC channel is through the &lt;a href=&quot;http://webchat.freenode.net/&quot;&gt;web client&lt;/a&gt;.  Feel free to stop by to ask anything or share your ideas about Apache Flink!&lt;/p&gt;

&lt;h3 id=&quot;meetups-and-talks&quot;&gt;Meetups and Talks&lt;/h3&gt;

&lt;p&gt;Apache Flink was presented in the &lt;a href=&quot;http://www.meetup.com/Netherlands-Hadoop-User-Group/events/218635152&quot;&gt;Amsterdam Hadoop User Group&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notable-code-contributions&quot;&gt;Notable code contributions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Code contributions listed here may not be part of a release or even the current snapshot yet.&lt;/p&gt;

&lt;h3 id=&quot;streaming-scala-api&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/275&quot;&gt;Streaming Scala API&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The Flink Streaming Java API recently got its Scala counterpart. Once merged, Flink Streaming users can use both Scala and Java for their development. The Flink Streaming Scala API is built as a thin layer on top of the Java API, making sure that the APIs are kept easily in sync.&lt;/p&gt;

&lt;h3 id=&quot;intermediate-datasets&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/254&quot;&gt;Intermediate datasets&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This pull request introduces a major change in the Flink runtime. Currently, the Flink runtime is based on the notion of operators that exchange data through channels. With the PR, intermediate data sets that are produced by operators become first-class citizens in the runtime. While this does not have any user-facing impact yet, it lays the groundwork for a slew of future features such as blocking execution, fine-grained fault-tolerance, and more efficient data sharing between cluster and client.&lt;/p&gt;

&lt;h3 id=&quot;configurable-execution-mode&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/259&quot;&gt;Configurable execution mode&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This pull request allows the user to change the object-reuse behaviour. Before this pull request, some operations would reuse objects passed to the user function while others would always create new objects. This introduces a system wide switch and changes all operators to either reuse objects or don’t reuse objects.&lt;/p&gt;

&lt;h3 id=&quot;distributed-coordination-via-akka&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/149&quot;&gt;Distributed Coordination via Akka&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another major change is a complete rewrite of the JobManager / TaskManager components in Scala. In addition to that, the old RPC service was replaced by Actors, using the Akka framework.&lt;/p&gt;

&lt;h3 id=&quot;sorting-of-very-large-records&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/249&quot;&gt;Sorting of very large records&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Flink&amp;#39;s internal sort-algorithms were improved to better handle large records (multiple 100s of megabytes or larger). Previously, the system did in some cases hold instances of multiple large records, resulting in high memory consumption and JVM heap thrashing. Through this fix, large records are streamed through the operators, reducing the memory consumption and GC pressure. The system now requires much less memory to support algorithms that work on such large records.&lt;/p&gt;

&lt;h3 id=&quot;kryo-serialization-as-the-new-default-fallback&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/271&quot;&gt;Kryo Serialization as the new default fallback&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Flink’s build-in type serialization framework is handles all common types very efficiently. Prior versions uses Avro to serialize types that the built-in framework could not handle.
Flink serialization system improved a lot over time and by now surpasses the capabilities of Avro in many cases. Kryo now serves as the default fallback serialization framework, supporting a much broader range of types.&lt;/p&gt;

&lt;h3 id=&quot;hadoop-filesystem-support&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-flink/pull/268&quot;&gt;Hadoop FileSystem support&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This change permits users to use all file systems supported by Hadoop with Flink. In practice this means that users can use Flink with Tachyon, Google Cloud Storage (also out of the box Flink YARN support on Google Compute Cloud), FTP and all the other file system implementations for Hadoop.&lt;/p&gt;

&lt;h2 id=&quot;heading-to-the-0.8.0-release&quot;&gt;Heading to the 0.8.0 release&lt;/h2&gt;

&lt;p&gt;The community is working hard together with the Apache infra team to migrate the Flink infrastructure to a top-level project. At the same time, the Flink community is working on the Flink 0.8.0 release which should be out very soon.&lt;/p&gt;
</description>
<pubDate>Tue, 06 Jan 2015 11:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2015/01/06/december-in-flink.html</link>
<guid isPermaLink="true">/news/2015/01/06/december-in-flink.html</guid>
</item>

<item>
<title>Hadoop Compatibility in Flink</title>
<description>&lt;p&gt;&lt;a href=&quot;http://hadoop.apache.org&quot;&gt;Apache Hadoop&lt;/a&gt; is an industry standard for scalable analytical data processing. Many data analysis applications have been implemented as Hadoop MapReduce jobs and run in clusters around the world. Apache Flink can be an alternative to MapReduce and improves it in many dimensions. Among other features, Flink provides much better performance and offers APIs in Java and Scala, which are very easy to use. Similar to Hadoop, Flink’s APIs provide interfaces for Mapper and Reducer functions, as well as Input- and OutputFormats along with many more operators. While being conceptually equivalent, Hadoop’s MapReduce and Flink’s interfaces for these functions are unfortunately not source compatible.&lt;/p&gt;

&lt;h2 id=&quot;flink’s-hadoop-compatibility-package&quot;&gt;Flink’s Hadoop Compatibility Package&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;/img/blog/hcompat-logos.png&quot; style=&quot;width:30%;margin:15px&quot;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;To close this gap, Flink provides a Hadoop Compatibility package to wrap functions implemented against Hadoop’s MapReduce interfaces and embed them in Flink programs. This package was developed as part of a &lt;a href=&quot;https://developers.google.com/open-source/soc/&quot;&gt;Google Summer of Code&lt;/a&gt; 2014 project. &lt;/p&gt;

&lt;p&gt;With the Hadoop Compatibility package, you can reuse all your Hadoop&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InputFormats&lt;/code&gt; (mapred and mapreduce APIs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputFormats&lt;/code&gt; (mapred and mapreduce APIs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mappers&lt;/code&gt; (mapred API)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reducers&lt;/code&gt; (mapred API)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in Flink programs without changing a line of code. Moreover, Flink also natively supports all Hadoop data types (&lt;code&gt;Writables&lt;/code&gt; and &lt;code&gt;WritableComparable&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The following code snippet shows a simple Flink WordCount program that solely uses Hadoop data types, InputFormat, OutputFormat, Mapper, and Reducer functions. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Definition of Hadoop Mapper function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tokenizer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Definition of Hadoop Reducer function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Setup Hadoop’s TextInputFormat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HadoopInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hadoopInputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HadoopInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadoopInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Read a DataSet with the Hadoop InputFormat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadoopInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DataSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Wrap Tokenizer Mapper function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HadoopMapFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Tokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Wrap Counter Reducer function (used as Reducer and Combiner)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduceGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HadoopReduceCombineFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Setup Hadoop’s TextOutputFormat&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HadoopOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hadoopOutputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HadoopOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hadoopOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mapred.textoutputformat.separator&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TextOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadoopOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Output &amp;amp; Execute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadoopOutputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hadoop Compat WordCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, Flink represents Hadoop key-value pairs as &lt;code&gt;Tuple2&amp;lt;key, value&amp;gt;&lt;/code&gt; tuples. Note, that the program uses Flink’s &lt;code&gt;groupBy()&lt;/code&gt; transformation to group data on the key field (field 0 of the &lt;code&gt;Tuple2&amp;lt;key, value&amp;gt;&lt;/code&gt;) before it is given to the Reducer function. At the moment, the compatibility package does not evaluate custom Hadoop partitioners, sorting comparators, or grouping comparators.&lt;/p&gt;

&lt;p&gt;Hadoop functions can be used at any position within a Flink program and of course also be mixed with native Flink functions. This means that instead of assembling a workflow of Hadoop jobs in an external driver method or using a workflow scheduler such as &lt;a href=&quot;http://oozie.apache.org&quot;&gt;Apache Oozie&lt;/a&gt;, you can implement an arbitrary complex Flink program consisting of multiple Hadoop Input- and OutputFormats, Mapper and Reducer functions. When executing such a Flink program, data will be pipelined between your Hadoop functions and will not be written to HDFS just for the purpose of data exchange.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;/img/blog/hcompat-flow.png&quot; style=&quot;width:100%;margin:15px&quot;&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-comes-next?&quot;&gt;What comes next?&lt;/h2&gt;

&lt;p&gt;While the Hadoop compatibility package is already very useful, we are currently working on a dedicated Hadoop Job operation to embed and execute Hadoop jobs as a whole in Flink programs, including their custom partitioning, sorting, and grouping code. With this feature, you will be able to chain multiple Hadoop jobs, mix them with Flink functions, and other operations such as &lt;a href=&quot;/docs/0.7-incubating/spargel_guide.html&quot;&gt;Spargel&lt;/a&gt; operations (Pregel/Giraph-style jobs).&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Flink lets you reuse a lot of the code you wrote for Hadoop MapReduce, including all data types, all Input- and OutputFormats, and Mapper and Reducers of the mapred-API. Hadoop functions can be used within Flink programs and mixed with all other Flink functions. Due to Flink’s pipelined execution, Hadoop functions can arbitrarily be assembled without data exchange via HDFS. Moreover, the Flink community is currently working on a dedicated Hadoop Job operation to supporting the execution of Hadoop jobs as a whole.&lt;/p&gt;

&lt;p&gt;If you want to use Flink’s Hadoop compatibility package checkout our &lt;a href=&quot;/docs/0.7-incubating/hadoop_compatibility.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;small&gt;Written by Fabian Hueske (&lt;a href=&quot;https://twitter.com/fhueske&quot;&gt;@fhueske&lt;/a&gt;).&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 18 Nov 2014 11:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2014/11/18/hadoop-compatibility.html</link>
<guid isPermaLink="true">/news/2014/11/18/hadoop-compatibility.html</guid>
</item>

<item>
<title>Apache Flink 0.7.0 available</title>
<description>&lt;p&gt;We are pleased to announce the availability of Flink 0.7.0. This release includes new user-facing features as well as performance and bug fixes, brings the Scala and Java APIs in sync, and introduces Flink Streaming. A total of 34 people have contributed to this release, a big thanks to all of them!&lt;/p&gt;

&lt;p&gt;Download Flink 0.7.0 &lt;a href=&quot;http://flink.incubator.apache.org/downloads.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the release changelog &lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;amp;version=12327648&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview-of-major-new-features&quot;&gt;Overview of major new features&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Flink Streaming:&lt;/strong&gt; The gem of the 0.7.0 release is undoubtedly Flink Streaming. Available currently in alpha, Flink Streaming provides a Java API on top of Apache Flink that can consume streaming data sources (e.g., from Apache Kafka, Apache Flume, and others) and process them in real time. A dedicated blog post on Flink Streaming and its performance is coming up here soon. You can check out the Streaming programming guide &lt;a href=&quot;http://flink.incubator.apache.org/docs/0.7-incubating/streaming_guide.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Scala API:&lt;/strong&gt; The Scala API has been completely rewritten. The Java and Scala APIs have now the same syntax and transformations and will be kept from now on in sync in every future release. See the new Scala API &lt;a href=&quot;http://flink.incubator.apache.org/docs/0.7-incubating/programming_guide.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logical key expressions:&lt;/strong&gt; You can now specify grouping and joining keys with logical names for member variables of POJO data types. For example, you can join two data sets as &lt;code&gt;persons.join(cities).where(“zip”).equalTo(“zipcode”)&lt;/code&gt;. Read more &lt;a href=&quot;http://flink.incubator.apache.org/docs/0.7-incubating/programming_guide.html#specifying-keys&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hadoop MapReduce compatibility:&lt;/strong&gt; You can run unmodified Hadoop Mappers and Reducers (mapred API) in Flink, use all Hadoop data types, and read data with all Hadoop InputFormats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collection-based execution backend:&lt;/strong&gt; The collection-based execution backend enables you to execute a Flink job as a simple Java collections program, bypassing completely the Flink runtime and optimizer. This feature is extremely useful for prototyping, and embedding Flink jobs in projects in a very lightweight manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Record API deprecated:&lt;/strong&gt; The (old) Stratosphere Record API has been marked as deprecated and is planned for removal in the 0.9.0 release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BLOB service:&lt;/strong&gt; This release contains a new service to distribute jar files and other binary data among the JobManager, TaskManagers and the client. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intermediate data sets:&lt;/strong&gt; A major rewrite of the system internals introduces intermediate data sets as first class citizens. The internal state machine that tracks the distributed tasks has also been completely rewritten for scalability. While this is not visible as a user-facing feature yet, it is the foundation for several upcoming exciting features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, there is limited support for Java 8 lambdas when compiling and running from an IDE. The problem is due to type erasure and whether Java compilers retain type information. We are currently working with the Eclipse and OpenJDK communities to resolve this.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tamas Ambrus&lt;/li&gt;
&lt;li&gt;Mariem Ayadi&lt;/li&gt;
&lt;li&gt;Marton Balassi&lt;/li&gt;
&lt;li&gt;Daniel Bali&lt;/li&gt;
&lt;li&gt;Ufuk Celebi&lt;/li&gt;
&lt;li&gt;Hung Chang&lt;/li&gt;
&lt;li&gt;David Eszes&lt;/li&gt;
&lt;li&gt;Stephan Ewen&lt;/li&gt;
&lt;li&gt;Judit Feher&lt;/li&gt;
&lt;li&gt;Gyula Fora&lt;/li&gt;
&lt;li&gt;Gabor Hermann&lt;/li&gt;
&lt;li&gt;Fabian Hueske&lt;/li&gt;
&lt;li&gt;Vasiliki Kalavri&lt;/li&gt;
&lt;li&gt;Kristof Kovacs&lt;/li&gt;
&lt;li&gt;Aljoscha Krettek&lt;/li&gt;
&lt;li&gt;Sebastian Kruse&lt;/li&gt;
&lt;li&gt;Sebastian Kunert&lt;/li&gt;
&lt;li&gt;Matyas Manninger&lt;/li&gt;
&lt;li&gt;Robert Metzger&lt;/li&gt;
&lt;li&gt;Mingliang Qi&lt;/li&gt;
&lt;li&gt;Till Rohrmann&lt;/li&gt;
&lt;li&gt;Henry Saputra&lt;/li&gt;
&lt;li&gt;Chesnay Schelper&lt;/li&gt;
&lt;li&gt;Moritz Schubotz&lt;/li&gt;
&lt;li&gt;Hung Sendoh Chang&lt;/li&gt;
&lt;li&gt;Peter Szabo&lt;/li&gt;
&lt;li&gt;Jonas Traub&lt;/li&gt;
&lt;li&gt;Fabian Tschirschnitz&lt;/li&gt;
&lt;li&gt;Artem Tsikiridis&lt;/li&gt;
&lt;li&gt;Kostas Tzoumas&lt;/li&gt;
&lt;li&gt;Timo Walther&lt;/li&gt;
&lt;li&gt;Daniel Warneke&lt;/li&gt;
&lt;li&gt;Tobias Wiens&lt;/li&gt;
&lt;li&gt;Yingjun Wu&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 04 Nov 2014 11:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2014/11/04/release-0.7.0.html</link>
<guid isPermaLink="true">/news/2014/11/04/release-0.7.0.html</guid>
</item>

<item>
<title>Upcoming Events</title>
<description>&lt;p&gt;We are happy to announce several upcoming Flink events both in Europe and the US. Starting with a &lt;strong&gt;Flink hackathon in Stockholm&lt;/strong&gt; (Oct 8-9) and a talk about Flink at the &lt;strong&gt;Stockholm Hadoop User Group&lt;/strong&gt; (Oct 8). This is followed by the very first &lt;strong&gt;Flink Meetup in Berlin&lt;/strong&gt; (Oct 15). In the US, there will be two Flink Meetup talks: the first one at the &lt;strong&gt;Pasadena Big Data User Group&lt;/strong&gt; (Oct 29) and the second one at &lt;strong&gt;Silicon Valley Hands On Programming Events&lt;/strong&gt; (Nov 4).&lt;/p&gt;

&lt;p&gt;We are looking forward to seeing you at any of these events. The following is an overview of each event and links to the respective Meetup pages.&lt;/p&gt;

&lt;h3 id=&quot;flink-hackathon,-stockholm-(oct-8-9)&quot;&gt;Flink Hackathon, Stockholm (Oct 8-9)&lt;/h3&gt;

&lt;p&gt;The hackathon will take place at KTH/SICS from Oct 8th-9th. You can sign up here: &lt;a href=&quot;https://docs.google.com/spreadsheet/viewform?formkey=dDZnMlRtZHJ3Z0hVTlFZVjU2MWtoX0E6MA&quot;&gt;https://docs.google.com/spreadsheet/viewform?formkey=dDZnMlRtZHJ3Z0hVTlFZVjU2MWtoX0E6MA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a rough agenda and a list of topics to work upon or look into. Suggestions and more topics are welcome.&lt;/p&gt;

&lt;h4 id=&quot;wednesday-(8th)&quot;&gt;Wednesday (8th)&lt;/h4&gt;

&lt;p&gt;9:00 - 10:00  Introduction to Apache Flink, System overview, and Dev
environment (by Stephan)&lt;/p&gt;

&lt;p&gt;10:15 - 11:00 Introduction to the topics (Streaming API and system by Gyula
&amp;amp; Marton), (Graphs by Vasia / Martin / Stephan)&lt;/p&gt;

&lt;p&gt;11:00 - 12:30 Happy hacking (part 1)&lt;/p&gt;

&lt;p&gt;12:30 - Lunch (Food will be provided by KTH / SICS. A big thank you to them
and also to Paris, for organizing that)&lt;/p&gt;

&lt;p&gt;13:xx - Happy hacking (part 2)&lt;/p&gt;

&lt;h4 id=&quot;thursday-(9th)&quot;&gt;Thursday (9th)&lt;/h4&gt;

&lt;p&gt;Happy hacking (continued)&lt;/p&gt;

&lt;h4 id=&quot;suggestions-for-topics&quot;&gt;Suggestions for topics&lt;/h4&gt;

&lt;h5 id=&quot;streaming&quot;&gt;Streaming&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sample streaming applications (e.g. continuous heavy hitters and topics
on the twitter stream)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a simple SQL to Streaming program parser. Possibly using
Apache Calcite (&lt;a href=&quot;http://optiq.incubator.apache.org/&quot;&gt;http://optiq.incubator.apache.org/&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement different windowing methods (count-based, time-based, ...)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement different windowed operations (windowed-stream-join,
windowed-stream-co-group)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Streaming state, and interaction with other programs (that access state
of a stream program)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;graph-analysis&quot;&gt;Graph Analysis&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prototype a Graph DSL (simple graph building, filters, graph
properties, some algorithms)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype abstractions different Graph processing paradigms
(vertex-centric, partition-centric).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generalize the delta iterations, allow flexible state access.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;meetup:-hadoop-user-group-talk,-stockholm-(oct-8)&quot;&gt;Meetup: Hadoop User Group Talk, Stockholm (Oct 8)&lt;/h3&gt;

&lt;p&gt;Hosted by Spotify, opens at 6 PM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/stockholm-hug/events/207323222/&quot;&gt;http://www.meetup.com/stockholm-hug/events/207323222/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;1st-flink-meetup,-berlin-(oct-15)&quot;&gt;1st Flink Meetup, Berlin (Oct 15)&lt;/h3&gt;

&lt;p&gt;We are happy to announce the first Flink meetup in Berlin. You are very welcome to to sign up and attend. The event will be held in Betahaus Cafe.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Apache-Flink-Meetup/events/208227422/&quot;&gt;http://www.meetup.com/Apache-Flink-Meetup/events/208227422/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;meetup:-pasadena-big-data-user-group-(oct-29)&quot;&gt;Meetup: Pasadena Big Data User Group (Oct 29)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/Pasadena-Big-Data-Users-Group/&quot;&gt;http://www.meetup.com/Pasadena-Big-Data-Users-Group/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;meetup:-silicon-valley-hands-on-programming-events-(nov-4)&quot;&gt;Meetup: Silicon Valley Hands On Programming Events (Nov 4)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/HandsOnProgrammingEvents/events/210504392/&quot;&gt;http://www.meetup.com/HandsOnProgrammingEvents/events/210504392/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 03 Oct 2014 12:00:00 +0200</pubDate>
<link>http://flink.apache.org/news/2014/10/03/upcoming_events.html</link>
<guid isPermaLink="true">/news/2014/10/03/upcoming_events.html</guid>
</item>

<item>
<title>Apache Flink 0.6.1 available</title>
<description>&lt;p&gt;We are happy to announce the availability of Flink 0.6.1.&lt;/p&gt;

&lt;p&gt;0.6.1 is a maintenance release, which includes minor fixes across several parts
of the system. We suggest all users of Flink to work with this newest version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/downloads.html&quot;&gt;Download&lt;/a&gt; the release today.&lt;/p&gt;
</description>
<pubDate>Fri, 26 Sep 2014 12:00:00 +0200</pubDate>
<link>http://flink.apache.org/news/2014/09/26/release-0.6.1.html</link>
<guid isPermaLink="true">/news/2014/09/26/release-0.6.1.html</guid>
</item>

<item>
<title>Apache Flink 0.6 available</title>
<description>&lt;p&gt;We are happy to announce the availability of Flink 0.6. This is the
first release of the system inside the Apache Incubator and under the
name Flink. Releases up to 0.5 were under the name Stratosphere, the
academic and open source project that Flink originates from.&lt;/p&gt;

&lt;h2 id=&quot;what-is-flink?&quot;&gt;What is Flink?&lt;/h2&gt;

&lt;p&gt;Apache Flink is a general-purpose data processing engine for
clusters. It runs on YARN clusters on top of data stored in Hadoop, as
well as stand-alone. Flink currently has programming APIs in Java and
Scala. Jobs are executed via Flink&amp;#39;s own runtime engine. Flink
features:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robust in-memory and out-of-core processing:&lt;/strong&gt; once read, data stays
  in memory as much as possible, and is gracefully de-staged to disk in
  the presence of memory pressure from limited memory or other
  applications. The runtime is designed to perform very well both in
  setups with abundant memory and in setups where memory is scarce.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;POJO-based APIs:&lt;/strong&gt; when programming, you do not have to pack your
  data into key-value pairs or some other framework-specific data
  model. Rather, you can use arbitrary Java and Scala types to model
  your data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficient iterative processing:&lt;/strong&gt; Flink contains explicit &amp;quot;iterate&amp;quot; operators
  that enable very efficient loops over data sets, e.g., for machine
  learning and graph applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A modular system stack:&lt;/strong&gt; Flink is not a direct implementation of its
  APIs but a layered system. All programming APIs are translated to an
  intermediate program representation that is compiled and optimized
  via a cost-based optimizer. Lower-level layers of Flink also expose
  programming APIs for extending the system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data pipelining/streaming:&lt;/strong&gt; Flink&amp;#39;s runtime is designed as a
  pipelined data processing engine rather than a batch processing
  engine. Operators do not wait for their predecessors to finish in
  order to start processing data. This results to very efficient
  handling of large data sets.&lt;/p&gt;

&lt;h2 id=&quot;release-0.6&quot;&gt;Release 0.6&lt;/h2&gt;

&lt;p&gt;Flink 0.6 builds on the latest Stratosphere 0.5 release. It includes
many bug fixes and improvements that make the system more stable and
robust, as well as breaking API changes.&lt;/p&gt;

&lt;p&gt;The full release notes are available &lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;amp;version=12327101&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the release &lt;a href=&quot;http://flink.incubator.apache.org/downloads.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Wilson Cao&lt;/li&gt;
&lt;li&gt;Ufuk Celebi&lt;/li&gt;
&lt;li&gt;Stephan Ewen&lt;/li&gt;
&lt;li&gt;Jonathan Hasenburg&lt;/li&gt;
&lt;li&gt;Markus Holzemer&lt;/li&gt;
&lt;li&gt;Fabian Hueske&lt;/li&gt;
&lt;li&gt;Sebastian Kunert&lt;/li&gt;
&lt;li&gt;Vikhyat Korrapati&lt;/li&gt;
&lt;li&gt;Aljoscha Krettek&lt;/li&gt;
&lt;li&gt;Sebastian Kruse&lt;/li&gt;
&lt;li&gt;Raymond Liu&lt;/li&gt;
&lt;li&gt;Robert Metzger&lt;/li&gt;
&lt;li&gt;Mingliang Qi&lt;/li&gt;
&lt;li&gt;Till Rohrmann&lt;/li&gt;
&lt;li&gt;Henry Saputra&lt;/li&gt;
&lt;li&gt;Chesnay Schepler&lt;/li&gt;
&lt;li&gt;Kostas Tzoumas&lt;/li&gt;
&lt;li&gt;Robert Waury&lt;/li&gt;
&lt;li&gt;Timo Walther&lt;/li&gt;
&lt;li&gt;Daniel Warneke&lt;/li&gt;
&lt;li&gt;Tobias Wiens&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 26 Aug 2014 12:00:00 +0200</pubDate>
<link>http://flink.apache.org/news/2014/08/26/release-0.6.html</link>
<guid isPermaLink="true">/news/2014/08/26/release-0.6.html</guid>
</item>

<item>
<title>Stratosphere version 0.5 available</title>
<description>&lt;p&gt;We are happy to announce a new major Stratosphere release, version 0.5. This release adds many new features and improves the interoperability, stability, and performance of the system. The major theme of the release is the completely new Java API that makes it easy to write powerful distributed programs.&lt;/p&gt;

&lt;p&gt;The release can be downloaded from the &lt;a href=&quot;http://stratosphere.eu/downloads/&quot;&gt;Stratosphere website&lt;/a&gt; and from &lt;a href=&quot;https://github.com/stratosphere/stratosphere/releases/tag/release-0.5&quot;&gt;GitHub&lt;/a&gt;. All components are available as Apache Maven dependencies, making it simple to include Stratosphere in other projects. The website provides &lt;a href=&quot;http://stratosphere.eu/docs/0.5/&quot;&gt;extensive documentation&lt;/a&gt; of the system and the new features.&lt;/p&gt;

&lt;h2 id=&quot;shortlist-of-new-features&quot;&gt;Shortlist of new Features&lt;/h2&gt;

&lt;p&gt;Below is a short list of the most important additions to the Stratosphere system.&lt;/p&gt;

&lt;h4 id=&quot;new-java-api&quot;&gt;New Java API&lt;/h4&gt;

&lt;p&gt;This release introduces a completely new &lt;strong&gt;data set-centric Java API&lt;/strong&gt;. This programming model significantly eases the development of Stratosphere programs, supports flexible use of regular Java classes as data types, and adds many new built-in operators to simplify the writing of powerful programs. The result are programs that need less code, are more readable, interoperate better with existing code, and execute faster.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;http://stratosphere.eu/docs/0.5/programming_guides/examples_java.html&quot;&gt;examples&lt;/a&gt;  to get a feel for the API.&lt;/p&gt;

&lt;h4 id=&quot;general-api-improvements&quot;&gt;General API Improvements&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Broadcast Variables:&lt;/strong&gt; Publish a data set to all instances of another operator. This is handy if the your operator depends on the result of a computation, e.g., filter all values smaller than the average.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributed Cache:&lt;/strong&gt; Make (local and HDFS) files locally available on each machine processing a task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration Termination Improvements&lt;/strong&gt; Iterative algorithms can now terminate based on intermediate data sets, not only through aggregated statistics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collection data sources and sinks:&lt;/strong&gt; Speed-up the development and testing of Stratosphere programs by reading data from regular Java collections and inserting back into them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JDBC data sources and sinks:&lt;/strong&gt; Read data from and write data to relational databases using a JDBC driver.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hadoop input format and output format support:&lt;/strong&gt; Read and write data with any Hadoop input or output format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support for Avro encoded data:&lt;/strong&gt; Read data that has been materialized using Avro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deflate Files:&lt;/strong&gt; Stratosphere now transparently reads &lt;code&gt;.deflate&lt;/code&gt; compressed files.&lt;/p&gt;

&lt;h4 id=&quot;runtime-and-optimizer-improvements&quot;&gt;Runtime and Optimizer Improvements&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;DAG Runtime Streaming:&lt;/strong&gt; Detection and resolution of streaming data flow deadlocks in the data flow optimizer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intermediate results across iteration boundaries:&lt;/strong&gt; Intermediate results computed outside iterative parts can be used inside iterative parts of the program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stability fixes:&lt;/strong&gt; Various stability fixes in both optimizer and runtime.&lt;/p&gt;

&lt;h4 id=&quot;setup-&amp;amp;-tooling&quot;&gt;Setup &amp;amp; Tooling&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Improved YARN support:&lt;/strong&gt; Many improvements based on user-feedback: Packaging, Permissions, Error handling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java 8 compatibility&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;In total, 26 people have contributed to Stratosphere since the last release. Thank you for making this project possible!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alexander Alexandrov&lt;/li&gt;
&lt;li&gt;Jesus Camacho&lt;/li&gt;
&lt;li&gt;Ufuk Celebi&lt;/li&gt;
&lt;li&gt;Mikhail Erofeev&lt;/li&gt;
&lt;li&gt;Stephan Ewen&lt;/li&gt;
&lt;li&gt;Alexandr Ferodov&lt;/li&gt;
&lt;li&gt;Filip Haase&lt;/li&gt;
&lt;li&gt;Jonathan Hasenberg&lt;/li&gt;
&lt;li&gt;Markus Holzemer&lt;/li&gt;
&lt;li&gt;Fabian Hueske&lt;/li&gt;
&lt;li&gt;Vasia Kalavri&lt;/li&gt;
&lt;li&gt;Aljoscha Krettek&lt;/li&gt;
&lt;li&gt;Rajika Kumarasiri&lt;/li&gt;
&lt;li&gt;Sebastian Kunert&lt;/li&gt;
&lt;li&gt;Aaron Lam&lt;/li&gt;
&lt;li&gt;Robert Metzger&lt;/li&gt;
&lt;li&gt;Faisal Moeen&lt;/li&gt;
&lt;li&gt;Martin Neumann&lt;/li&gt;
&lt;li&gt;Mingliang Qi&lt;/li&gt;
&lt;li&gt;Till Rohrmann&lt;/li&gt;
&lt;li&gt;Chesnay Schepler&lt;/li&gt;
&lt;li&gt;Vyachislav Soludev&lt;/li&gt;
&lt;li&gt;Tuan Trieu&lt;/li&gt;
&lt;li&gt;Artem Tsikiridis&lt;/li&gt;
&lt;li&gt;Timo Walther&lt;/li&gt;
&lt;li&gt;Robert Waury&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stratosphere-is-going-apache&quot;&gt;Stratosphere is going Apache&lt;/h2&gt;

&lt;p&gt;The Stratosphere project has been accepted to the Apache Incubator and will continue its work under the umbrella of the Apache Software Foundation. Due to a name conflict, we are switching the name of the project. We will make future releases of Stratosphere through the Apache foundation under a new name.&lt;/p&gt;
</description>
<pubDate>Sat, 31 May 2014 12:00:00 +0200</pubDate>
<link>http://flink.apache.org/news/2014/05/31/release-0.5.html</link>
<guid isPermaLink="true">/news/2014/05/31/release-0.5.html</guid>
</item>

<item>
<title>Stratosphere accepted as Apache Incubator Project</title>
<description>&lt;p&gt;We are happy to announce that Stratosphere has been accepted as a project for the &lt;a href=&quot;https://incubator.apache.org/&quot;&gt;Apache Incubator&lt;/a&gt;. The &lt;a href=&quot;https://wiki.apache.org/incubator/StratosphereProposal&quot;&gt;proposal&lt;/a&gt; has been accepted by the Incubator PMC members earlier this week. The Apache Incubator is the first step in the process of giving a project to the &lt;a href=&quot;http://apache.org&quot;&gt;Apache Software Foundation&lt;/a&gt;. While under incubation, the project will move to the Apache infrastructure and adopt the community-driven development principles of the Apache Foundation. Projects can graduate from incubation to become top-level projects if they show activity, a healthy community dynamic, and releases.&lt;/p&gt;

&lt;p&gt;We are glad to have Alan Gates as champion on board, as well as a set of great mentors, including Sean Owen, Ted Dunning, Owen O&amp;#39;Malley, Henry Saputra, and Ashutosh Chauhan. We are confident that we will make this a great open source effort.&lt;/p&gt;
</description>
<pubDate>Wed, 16 Apr 2014 12:00:00 +0200</pubDate>
<link>http://flink.apache.org/news/2014/04/16/stratosphere-goes-apache-incubator.html</link>
<guid isPermaLink="true">/news/2014/04/16/stratosphere-goes-apache-incubator.html</guid>
</item>

<item>
<title>Stratosphere got accepted for Google Summer of Code 2014</title>
<description>&lt;div class=&quot;lead&quot;&gt;Students: Apply now for exciting summer projects in the Big Data / Analytics field&lt;/div&gt;

&lt;p&gt;We are pleased to announce that Stratosphere got accepted to &lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;Google Summer of Code 2014&lt;/a&gt; as a mentoring organization. This means that we will host a bunch of students to conduct projects within Stratosphere over the summer. &lt;a href=&quot;http://en.flossmanuals.net/GSoCStudentGuide/&quot;&gt;Read more on the GSoC manual for students&lt;/a&gt; and the &lt;a href=&quot;http://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2014/help_page&quot;&gt;official FAQ&lt;/a&gt;. Students can improve their coding skills, learn to work with open-source projects, improve their CV and get a nice paycheck from Google.&lt;/p&gt;

&lt;p&gt;If you are an interested student, check out our &lt;a href=&quot;https://github.com/stratosphere/stratosphere/wiki/Google-Summer-of-Code-2014&quot;&gt;idea list&lt;/a&gt; in the wiki. It contains different projects with varying ranges of difficulty and requirement profiles. Students can also suggest their own projects.&lt;/p&gt;

&lt;p&gt;We welcome students to sign up at our &lt;a href=&quot;https://groups.google.com/forum/#!forum/stratosphere-dev&quot;&gt;developer mailing list&lt;/a&gt; to discuss their ideas.
Applying students can use our wiki (create a new page) to create a project proposal. We are happy to have a look at it.&lt;/p&gt;
</description>
<pubDate>Mon, 24 Feb 2014 21:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2014/02/24/stratosphere-google-summer-of-code-2014.html</link>
<guid isPermaLink="true">/news/2014/02/24/stratosphere-google-summer-of-code-2014.html</guid>
</item>

<item>
<title>Use Stratosphere with Amazon Elastic MapReduce</title>
<description>&lt;div class=&quot;lead&quot;&gt;Get started with Stratosphere within 10 minutes using Amazon Elastic MapReduce.&lt;/div&gt;

&lt;p&gt;This step-by-step tutorial will guide you through the setup of Stratosphere using Amazon Elastic MapReduce.&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/elasticmapreduce/&quot;&gt;Amazon Elastic MapReduce&lt;/a&gt; (Amazon EMR) is part of Amazon Web services. EMR allows to create Hadoop clusters that analyze data stored in Amazon S3 (AWS&amp;#39; cloud storage). Stratosphere runs on top of Hadoop using the &lt;a href=&quot;http://hadoop.apache.org/docs/r2.2.0/hadoop-project-dist/hadoop-common/releasenotes.html&quot;&gt;recently&lt;/a&gt; released cluster resource manager &lt;a href=&quot;http://hadoop.apache.org/docs/current2/hadoop-yarn/hadoop-yarn-site/YARN.html&quot;&gt;YARN&lt;/a&gt;. YARN allows to use many different data analysis tools in your cluster side by side. Tools that run with YARN are, for example &lt;a href=&quot;https://giraph.apache.org/&quot;&gt;Apache Giraph&lt;/a&gt;, &lt;a href=&quot;http://spark.incubator.apache.org/&quot;&gt;Spark&lt;/a&gt; or &lt;a href=&quot;http://hortonworks.com/blog/introducing-hoya-hbase-on-yarn/&quot;&gt;HBase&lt;/a&gt;. Stratosphere also &lt;a href=&quot;/docs/0.4/setup/yarn.html&quot;&gt;runs on YARN&lt;/a&gt; and that&amp;#39;s the approach for this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;1.-step:-login-to-aws-and-prepare-secure-access&quot;&gt;1. Step: Login to AWS and prepare secure access&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log in to the &lt;a href=&quot;https://console.aws.amazon.com/console/home&quot;&gt;AWS Console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to have SSH keys to access the Hadoop master node. If you do not have keys for your computer, generate them:&lt;/p&gt;

&lt;div class=&quot;row&quot; style=&quot;padding-top:15px&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
&lt;a data-lightbox=&quot;inputs&quot; href=&quot;/img/blog/emr-security.png&quot; data-lightbox=&quot;example-1&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/blog/emr-security.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
        &lt;ul&gt;
            &lt;li&gt;Select &lt;a href=&quot;https://console.aws.amazon.com/ec2/v2/home&quot;&gt;EC2&lt;/a&gt; and click on &quot;Key Pairs&quot; in the &quot;NETWORK &amp; SECURITY&quot; section.&lt;/li&gt;
            &lt;li&gt;Click on &quot;Create Key Pair&quot; and give it a name&lt;/li&gt;
            &lt;li&gt;After pressing &quot;Yes&quot; it will download a .pem file.&lt;/li&gt;
            &lt;li&gt;Change the permissions of the .pem file&lt;/li&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chmod og-rwx ~/work-laptop.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2.-step:-create-your-hadoop-cluster-in-the-cloud&quot;&gt;2. Step: Create your Hadoop Cluster in the cloud&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;a href=&quot;https://console.aws.amazon.com/elasticmapreduce/vnext/&quot;&gt;Elastic MapReduce&lt;/a&gt; from the AWS console&lt;/li&gt;
&lt;li&gt;Click the blue &amp;quot;Create cluster&amp;quot; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;row&quot; style=&quot;padding-top:15px&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
&lt;a data-lightbox=&quot;inputs&quot; href=&quot;/img/blog/emr-hadoopversion.png&quot; data-lightbox=&quot;example-1&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/blog/emr-hadoopversion.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
        &lt;ul&gt;
            &lt;li&gt;Choose a Cluster name&lt;/li&gt;
            &lt;li&gt;You can let the other settings remain unchanged (termination protection, logging, debugging)&lt;/li&gt;
            &lt;li&gt;For the Hadoop distribution, it is very important to choose one with YARN support. We use &lt;b&gt;3.0.3 (Hadoop 2.2.0)&lt;/b&gt; (the minor version might change over time)&lt;/li&gt;
            &lt;li&gt;Remove all applications to be installed (unless you want to use them)&lt;/li&gt;
            &lt;li&gt;Choose the instance types you want to start. Stratosphere runs fine with m1.large instances. Core and Task instances both run Stratosphere, but only core instances contain HDFS data nodes.&lt;/li&gt;
            &lt;li&gt;Choose the &lt;b&gt;EC2 key pair&lt;/b&gt; you&#39;ve created in the previous step!&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Thats it! You can now press the &amp;quot;Create cluster&amp;quot; button at the end of the form to boot it!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3.-step:-launch-stratosphere&quot;&gt;3. Step: Launch Stratosphere&lt;/h3&gt;

&lt;p&gt;You might need to wait a few minutes until Amazon started your cluster. (You can monitor the progress of the instances in EC2). Use the refresh button in the top right corner.&lt;/p&gt;

&lt;p&gt;You see that the master is up if the field &lt;b&gt;Master public DNS&lt;/b&gt; contains a value (first line), connect to it using SSH.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh hadoop@&amp;lt;your master public DNS&amp;gt; -i &amp;lt;path to your .pem&amp;gt;
&lt;span class=&quot;c&quot;&gt;# for my example, it looks like this:&lt;/span&gt;
ssh hadoop@ec2-54-213-61-105.us-west-2.compute.amazonaws.com -i ~/Downloads/work-laptop.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



(Windows users have to follow &lt;a href=&quot;http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-connect-master-node-ssh.html&quot;&gt;these instructions&lt;/a&gt; to SSH into the machine running the master.) &lt;/br&gt;&lt;/br&gt;
Once connected to the master, download and start Stratosphere for YARN: 
&lt;ul&gt;
    &lt;li&gt;Download and extract Stratosphere-YARN&lt;/li&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://stratosphere-bin.s3-website-us-east-1.amazonaws.com/stratosphere-dist-0.5-SNAPSHOT-yarn.tar.gz
&lt;span class=&quot;c&quot;&gt;# extract it&lt;/span&gt;
tar xvzf stratosphere-dist-0.5-SNAPSHOT-yarn.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

    &lt;li&gt;Start Stratosphere in the cluster using Hadoop YARN&lt;/li&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;stratosphere-yarn-0.5-SNAPSHOT/
./bin/yarn-session.sh -n &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; -jm &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt; -tm 3000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


The arguments have the following meaning
    &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; number of TaskManagers (=workers). This number must not exeed the number of task instances&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;-jm&lt;/code&gt; memory (heapspace) for the JobManager&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;-tm&lt;/code&gt; memory for the TaskManagers&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;

Once the output has changed from 

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;JobManager is now running on N/A:6123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

to 

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;JobManager is now running on ip-172-31-13-68.us-west-2.compute.internal:6123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

Stratosphere has started the JobManager. It will take a few seconds until the TaskManagers (workers) have connected to the JobManager. To see how many TaskManagers connected, you have to access the JobManager&#39;s web interface. Follow the steps below to do that ...




&lt;h3&gt; 4. Step: Launch a Stratosphere Job&lt;/h3&gt;

This step shows how to submit and monitor a Stratosphere Job in the Amazon Cloud.

&lt;ul&gt;
&lt;li&gt; Open an additional terminal and connect again to the master of your cluster. &lt;/li&gt;

We recommend to create a SOCKS-proxy with your SSH that allows you to easily connect into the cluster. (If you&#39;ve already a VPN setup with EC2, you can probably use that as well.)


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -D localhost:2001 hadoop@&amp;lt;your master dns name&amp;gt; -i &amp;lt;your pem file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


Notice the &lt;code&gt;-D localhost:2001&lt;/code&gt; argument: It opens a SOCKS proxy on your computer allowing any application to use it to communicate through the proxy via an SSH tunnel to the master node. This allows you to access all services in your EMR cluster, such as the HDFS NameNode or the YARN web interface.

&lt;li&gt;Configure a browser to use the SOCKS proxy. Open a browser with SOCKS proxy support (such as Firefox). Ideally, do not use your primary browser for this, since ALL traffic will be routed through Amazon.&lt;/li&gt;

&lt;div class=&quot;row&quot; style=&quot;padding-top:15px&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
&lt;a data-lightbox=&quot;inputs&quot; href=&quot;/img/blog/emr-firefoxsettings.png&quot; data-lightbox=&quot;example-1&quot;&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/img/blog/emr-firefoxsettings.png&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;
        &lt;ul&gt;
            &lt;li&gt;To configure the SOCKS proxy with Firefox, click on &quot;Edit&quot;, &quot;Preferences&quot;, choose the &quot;Advanced&quot; tab and press the &quot;Settings ...&quot; button.&lt;/li&gt;
            &lt;li&gt;Enter the details of the SOCKS proxy &lt;b&gt;localhost:2001&lt;/b&gt;. Choose SOCKS v4.&lt;/li&gt;
            &lt;li&gt;Close the settings, your browser is now talking to the master node of your cluster&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Since you&amp;#39;re connected to the master now, you can open several web interfaces: &lt;br&gt;
&lt;b&gt;YARN Resource Manager&lt;/b&gt;: &lt;code&gt;http://&amp;lt;masterIPAddress&amp;gt;:9026/&lt;/code&gt; &lt;br&gt;
&lt;b&gt;HDFS NameNode&lt;/b&gt;: &lt;code&gt;http://&amp;lt;masterIPAddress&amp;gt;:9101/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You find the &lt;code&gt;masterIPAddress&lt;/code&gt; by entering &lt;code&gt;ifconfig&lt;/code&gt; into the terminal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hadoop@ip-172-31-38-95 ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ifconfig
eth0      Link encap:Ethernet  HWaddr 02:CF:8E:CB:28:B2  
          inet addr:172.31.38.95  Bcast:172.31.47.255  Mask:255.255.240.0
          inet6 addr: fe80::cf:8eff:fecb:28b2/64 Scope:Link
          RX bytes:166314967 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;158.6 MiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  TX bytes:89319246 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;85.1 MiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; If you want to use the hostnames within your Firefox (that also makes the NameNode links work), you have to enable DNS resolution over the SOCKS proxy. Open the Firefox config &lt;code&gt;about:config&lt;/code&gt; and set &lt;code&gt;network.proxy.socks_remote_dns&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The YARN ResourceManager also allows you to connect to &lt;b&gt;Stratosphere&amp;#39;s JobManager web interface&lt;/b&gt;. Click the &lt;b&gt;ApplicationMaster&lt;/b&gt; link in the &amp;quot;Tracking UI&amp;quot; column.&lt;/p&gt;

&lt;p&gt;To run the Wordcount example, you have to upload some sample data.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# download a text&lt;/span&gt;
wget http://www.gnu.org/licenses/gpl.txt
&lt;span class=&quot;c&quot;&gt;# upload it to HDFS:&lt;/span&gt;
hadoop fs -copyFromLocal gpl.txt /input&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To run a Job, enter the following command into the master&amp;#39;s command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# optional: go to the extracted directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;stratosphere-yarn-0.5-SNAPSHOT/
&lt;span class=&quot;c&quot;&gt;# run the wordcount example&lt;/span&gt;
./bin/stratosphere run -w -j examples/stratosphere-java-examples-0.5-SNAPSHOT-WordCount.jar  -a &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; hdfs:///input hdfs:///output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure that the number of TaskManager&amp;#39;s have connected to the JobManager.&lt;/p&gt;

&lt;p&gt;Lets go through the command in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./bin/stratosphere&lt;/code&gt; is the standard launcher for Stratosphere jobs from the command line&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-w&lt;/code&gt; flag stands for &amp;quot;wait&amp;quot;. It is a very useful to track the progress of the job.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-j examples/stratosphere-java-examples-0.5-SNAPSHOT-WordCount.jar&lt;/code&gt; the &lt;code&gt;-j&lt;/code&gt; command sets the jar file containing the job. If you have you own application, place your Jar-file here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a 16 hdfs:///input hdfs:///output&lt;/code&gt; the &lt;code&gt;-a&lt;/code&gt; command specifies the Job-specific arguments. In this case, the wordcount expects the following input &lt;code&gt;&amp;lt;numSubStasks&amp;gt; &amp;lt;input&amp;gt; &amp;lt;output&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can monitor the progress of your job in the JobManager webinterface. Once the job has finished (which should be the case after less than 10 seconds), you can analyze it there.
Inspect the result in HDFS using:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hadoop fs -tail /output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to shut down the whole cluster in the cloud, use Amazon&amp;#39;s webinterface and click on &amp;quot;Terminate cluster&amp;quot;. If you just want to stop the YARN session, press CTRL+C in the terminal. The Stratosphere instances will be killed by YARN.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;small&gt;Written by Robert Metzger (&lt;a href=&quot;https://twitter.com/rmetzger_&quot;&gt;@rmetzger_&lt;/a&gt;).&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 18 Feb 2014 20:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2014/02/18/amazon-elastic-mapreduce-cloud-yarn.html</link>
<guid isPermaLink="true">/news/2014/02/18/amazon-elastic-mapreduce-cloud-yarn.html</guid>
</item>

<item>
<title>Accessing Data Stored in MongoDB with Stratosphere</title>
<description>&lt;p&gt;We recently merged a &lt;a href=&quot;https://github.com/stratosphere/stratosphere/pull/437&quot;&gt;pull request&lt;/a&gt; that allows you to use any existing Hadoop &lt;a href=&quot;http://developer.yahoo.com/hadoop/tutorial/module5.html#inputformat&quot;&gt;InputFormat&lt;/a&gt; with Stratosphere. So you can now (in the &lt;code&gt;0.5-SNAPSHOT&lt;/code&gt; and upwards versions) define a Hadoop-based data source:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;HadoopDataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HadoopDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Input Lines&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TextInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInputPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We describe in the following article how to access data stored in &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; with Stratosphere. This allows users to join data from multiple sources (e.g. MonogDB and HDFS) or perform machine learning with the documents stored in MongoDB.&lt;/p&gt;

&lt;p&gt;The approach here is to use the &lt;code&gt;MongoInputFormat&lt;/code&gt; that was developed for Apache Hadoop but now also runs with Stratosphere.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;JobConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JobConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mongo.input.uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mongodb://localhost:27017/enron_mail.messages&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HadoopDataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HadoopDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoInputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Read from Mongodb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WritableWrapperConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;example-program&quot;&gt;Example Program&lt;/h3&gt;

&lt;p&gt;The example program reads data from the &lt;a href=&quot;http://www.cs.cmu.edu/%7Eenron/&quot;&gt;enron dataset&lt;/a&gt; that contains about 500k internal e-mails. The data is stored in MongoDB and the Stratosphere program counts the number of e-mails per day.&lt;/p&gt;

&lt;p&gt;The complete code of this sample program is available on &lt;a href=&quot;https://github.com/stratosphere/stratosphere-mongodb-example&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;prepare-mongodb-and-the-data&quot;&gt;Prepare MongoDB and the Data&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install MongoDB&lt;/li&gt;
&lt;li&gt;Download the enron dataset from &lt;a href=&quot;http://mongodb-enron-email.s3-website-us-east-1.amazonaws.com/&quot;&gt;their website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unpack and load it&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; bunzip2 enron_mongo.tar.bz2
 tar xvf enron_mongo.tar
 mongorestore dump/enron_mail/messages.bson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We used &lt;a href=&quot;http://robomongo.org/&quot;&gt;Robomongo&lt;/a&gt; to visually examine the dataset stored in MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/robomongo.png&quot; style=&quot;width:90%;margin:15px&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;build-mongoinputformat&quot;&gt;Build &lt;code&gt;MongoInputFormat&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;MongoDB offers an InputFormat for Hadoop on their &lt;a href=&quot;https://github.com/mongodb/mongo-hadoop&quot;&gt;GitHub page&lt;/a&gt;. The code is not available in any Maven repository, so we have to build the jar file on our own.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out the repository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/mongodb/mongo-hadoop.git
cd mongo-hadoop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Set the appropriate Hadoop version in the &lt;code&gt;build.sbt&lt;/code&gt;, we used &lt;code&gt;1.1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hadoopRelease in ThisBuild :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.1&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Build the input format&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./sbt package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The jar-file is now located in &lt;code&gt;core/target&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-stratosphere-program&quot;&gt;The Stratosphere Program&lt;/h4&gt;

&lt;p&gt;Now we have everything prepared to run the Stratosphere program. I only ran it on my local computer, out of Eclipse. To do that, check out the code ...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/stratosphere/stratosphere-mongodb-example.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and import it as a Maven project into your Eclipse. You have to manually add the previously built mongo-hadoop jar-file as a dependency.
You can now press the &amp;quot;Run&amp;quot; button and see how Stratosphere executes the little program. It was running for about 8 seconds on the 1.5 GB dataset.&lt;/p&gt;

&lt;p&gt;The result (located in &lt;code&gt;/tmp/enronCountByDay&lt;/code&gt;) now looks like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;11,Fri Sep 26 10:00:00 CEST 1997
154,Tue Jun 29 10:56:00 CEST 1999
292,Tue Aug 10 12:11:00 CEST 1999
185,Thu Aug 12 18:35:00 CEST 1999
26,Fri Mar 19 12:33:00 CET 1999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is one thing left I want to point out here. MongoDB represents objects stored in the database as JSON-documents. Since Stratosphere&amp;#39;s standard types do not support JSON documents, I was using the &lt;code&gt;WritableWrapper&lt;/code&gt; here. This wrapper allows to use any Hadoop datatype with Stratosphere.&lt;/p&gt;

&lt;p&gt;The following code example shows how the JSON-documents are accessed in Stratosphere.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Writable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valWr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WritableWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BSONWritable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BSONWritable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valWr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BasicDBObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerOb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicDBObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerOb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// further date processing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please use the comments if you have questions or if you want to showcase your own MongoDB-Stratosphere integration.
&lt;br&gt;&lt;br&gt;
&lt;small&gt;Written by Robert Metzger (&lt;a href=&quot;https://twitter.com/rmetzger_&quot;&gt;@rmetzger_&lt;/a&gt;).&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 28 Jan 2014 10:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2014/01/28/querying_mongodb.html</link>
<guid isPermaLink="true">/news/2014/01/28/querying_mongodb.html</guid>
</item>

<item>
<title>Optimizer Plan Visualization Tool</title>
<description>&lt;p&gt;Stratosphere&amp;#39;s hybrid approach combines &lt;strong&gt;MapReduce&lt;/strong&gt; and &lt;strong&gt;MPP database&lt;/strong&gt; techniques. One central part of this approach is to have a &lt;strong&gt;separation between the programming (API) and the way programs are executed&lt;/strong&gt; &lt;em&gt;(execution plans)&lt;/em&gt;. The &lt;strong&gt;compiler/optimizer&lt;/strong&gt; decides the details concerning caching or when to partition/broadcast with a holistic view of the program. The same program may actually be executed differently in different scenarios (input data of different sizes, different number of machines).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to know how exactly the system executes your program, you can find it out in two ways&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;browser-based webclient UI&lt;/strong&gt;, which takes programs packaged into JARs and draws the execution plan as a visual data flow (check out the &lt;a href=&quot;http://stratosphere.eu/docs/0.4/program_execution/web_interface.html&quot;&gt;documentation&lt;/a&gt; for details).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For &lt;strong&gt;programs using the &lt;a href=&quot;http://stratosphere.eu/docs/0.4/program_execution/local_executor.html&quot;&gt;Local- &lt;/a&gt; or &lt;a href=&quot;http://stratosphere.eu/docs/0.4/program_execution/remote_executor.html&quot;&gt;Remote Executor&lt;/a&gt;&lt;/strong&gt;, you can get the optimizer plan using the method &lt;code&gt;LocalExecutor.optimizerPlanAsJSON(plan)&lt;/code&gt;. The &lt;strong&gt;resulting JSON&lt;/strong&gt; string describes the execution strategies chosen by the optimizer. Naturally, you do not want to parse that yourself, especially for longer programs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The builds &lt;em&gt;0.5-SNAPSHOT&lt;/em&gt; and later come with a &lt;strong&gt;tool that visualizes the JSON&lt;/strong&gt; string. It is a standalone version of the webclient&amp;#39;s visualization, packed as an html document &lt;code&gt;tools/planVisualizer.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you open it in a browser (for example &lt;code&gt;chromium-browser tools/planVisualizer.html&lt;/code&gt;) it shows a text area where you can paste the JSON string and it renders that string as a dataflow plan (assuming it was a valid JSON string and plan). The pictures below show how that looks for the &lt;a href=&quot;https://github.com/stratosphere/stratosphere/blob/release-0.4/stratosphere-examples/stratosphere-java-examples/src/main/java/eu/stratosphere/example/java/record/connectedcomponents/WorksetConnectedComponents.java?source=cc&quot;&gt;included sample program&lt;/a&gt; that uses delta iterations to compute the connected components of a graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/plan_visualizer1.png&quot; style=&quot;width:100%;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/plan_visualizer2.png&quot; style=&quot;width:100%;&quot;&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 26 Jan 2014 10:00:00 +0100</pubDate>
<link>http://flink.apache.org/news/2014/01/26/optimizer_plan_visualization_tool.html</link>
<guid isPermaLink="true">/news/2014/01/26/optimizer_plan_visualization_tool.html</guid>
</item>

<item>
<title>Stratosphere 0.4 Released</title>
<description>&lt;p&gt;We are pleased to announce that version 0.4 of the Stratosphere system has been released. &lt;/p&gt;

&lt;p&gt;Our team has been working hard during the last few months to create an improved and stable Stratosphere version. The new version comes with many new features, usability and performance improvements in all levels, including a new Scala API for the concise specification of programs, a Pregel-like API, support for Yarn clusters, and major performance improvements. The system features now first-class support for iterative programs and thus covers traditional analytical use cases as well as data mining and graph processing use cases with great performance.&lt;/p&gt;

&lt;p&gt;In the course of the transition from v0.2 to v0.4 of the system, we have changed pre-existing APIs based on valuable user feedback. This means that, in the interest of easier programming, we have broken backwards compatibility and existing jobs must be adapted, as described in &lt;a href=&quot;/blog/tutorial/2014/01/12/0.4-migration-guide.html&quot;&gt;the migration guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article will guide you through the feature list of the new release.&lt;/p&gt;

&lt;h3 id=&quot;scala-programming-interface&quot;&gt;Scala Programming Interface&lt;/h3&gt;

&lt;p&gt;The new Stratosphere version comes with a new programming API in Scala that supports very fluent and efficient programs that can be expressed with very few lines of code. The API uses Scala&amp;#39;s native type system (no special boxed data types) and supports grouping and joining on types beyond key/value pairs. We use code analysis and code generation to transform Scala&amp;#39;s data model to the Stratosphere runtime. Stratosphere Scala programs are optimized before execution by Stratosphere&amp;#39;s optimizer just like Stratosphere Java programs.&lt;/p&gt;

&lt;p&gt;Learn more about the Scala API at the &lt;a href=&quot;/docs/0.4/programming_guides/scala.html&quot;&gt;Scala Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;iterations&quot;&gt;Iterations&lt;/h3&gt;

&lt;p&gt;Stratosphere v0.4 introduces deep support for iterative algorithms, required by a large class of advanced analysis algorithms. In contrast to most other systems, &amp;quot;looping over the data&amp;quot; is done inside the system&amp;#39;s runtime, rather than in the client. Individual iterations (supersteps) can be as fast as sub-second times. Loop-invariant data is automatically cached in memory.&lt;/p&gt;

&lt;p&gt;We support a special form of iterations called “delta iterations” that selectively modify only some elements of intermediate solution in each iteration. These are applicable to a variety of applications, e.g., use cases of Apache Giraph. We have observed speedups of 70x when using delta iterations instead of regular iterations.&lt;/p&gt;

&lt;p&gt;Read more about the new iteration feature in &lt;a href=&quot;/docs/0.4/programming_guides/iterations.html&quot;&gt;the documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;hadoop-yarn-support&quot;&gt;Hadoop YARN Support&lt;/h3&gt;

&lt;p&gt;YARN (Yet Another Resource Negotiator) is the major new feature of the recently announced &lt;a href=&quot;http://hadoop.apache.org/docs/r2.2.0/&quot;&gt;Hadoop 2.2&lt;/a&gt;. It allows to share existing clusters with different runtimes. So you can run MapReduce alongside Storm and others. With the 0.4 release, Stratosphere supports YARN.
Follow &lt;a href=&quot;/docs/0.4/setup/yarn.html&quot;&gt;our guide&lt;/a&gt; on how to start a Stratosphere YARN session.&lt;/p&gt;

&lt;h3 id=&quot;improved-scripting-language-meteor&quot;&gt;Improved Scripting Language Meteor&lt;/h3&gt;

&lt;p&gt;The high-level language Meteor now natively serializes JSON trees for greater performance and offers additional operators and file formats. We greatly empowered the user to write crispier scripts by adding second-order functions, multi-output operators, and other syntactical sugar. For developers of Meteor packages, the API is much more comprehensive and allows to define custom data types that can be easily embedded in JSON trees through ad-hoc byte code generation.&lt;/p&gt;

&lt;h3 id=&quot;spargel:-pregel-inspired-graph-processing&quot;&gt;Spargel: Pregel Inspired Graph Processing&lt;/h3&gt;

&lt;p&gt;Spargel is a vertex-centric API similar to the interface proposed in Google&amp;#39;s Pregel paper and implemented in Apache Giraph. Spargel is implemented in 500 lines of code (including comments) on top of Stratosphere&amp;#39;s delta iterations feature. This confirms the flexibility of Stratosphere&amp;#39;s architecture. &lt;/p&gt;

&lt;h3 id=&quot;web-frontend&quot;&gt;Web Frontend&lt;/h3&gt;

&lt;p&gt;Using the new web frontend, you can monitor the progress of Stratosphere jobs. For finished jobs, the frontend shows a breakdown of the execution times for each operator. The webclient also visualizes the execution strategies chosen by the optimizer.&lt;/p&gt;

&lt;h3 id=&quot;accumulators&quot;&gt;Accumulators&lt;/h3&gt;

&lt;p&gt;Stratosphere&amp;#39;s accumulators allow program developers to compute simple statistics, such as counts, sums, min/max values, or histograms, as a side effect of the processing functions. An example application would be to count the total number of records/tuples processed by a function. Stratosphere will not launch additional tasks (reducers), but will compute the number &amp;quot;on the fly&amp;quot; as a side-product of the functions application to the data. The concept is similar to Hadoop&amp;#39;s counters, but supports more types of aggregation.&lt;/p&gt;

&lt;h3 id=&quot;refactored-apis&quot;&gt;Refactored APIs&lt;/h3&gt;

&lt;p&gt;Based on valuable user feedback, we refactored the Java programming interface to make it more intuitive and easier to use. The basic concepts are still the same, however the naming of most interfaces changed and the structure of the code was adapted. When updating to the 0.4 release you will need to adapt your jobs and dependencies. A previous blog post has a guide to the necessary changes to adapt programs to Stratosphere 0.4.&lt;/p&gt;

&lt;h3 id=&quot;local-debugging&quot;&gt;Local Debugging&lt;/h3&gt;

&lt;p&gt;You can now test and debug Stratosphere jobs locally. The &lt;a href=&quot;/docs/0.4/program_execution/local_executor.html&quot;&gt;LocalExecutor&lt;/a&gt; allows to execute Stratosphere Jobs from IDE&amp;#39;s. The same code that runs on clusters also runs in a single JVM multi-threaded. The mode supports full debugging capabilities known from regular applications (placing breakpoints and stepping through the program&amp;#39;s functions). An advanced mode supports simulating fully distributed operation locally.&lt;/p&gt;

&lt;h3 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The configuration of Stratosphere has been changed to YAML&lt;/li&gt;
&lt;li&gt;HBase support&lt;/li&gt;
&lt;li&gt;JDBC Input format&lt;/li&gt;
&lt;li&gt;Improved Windows Compatibility: Batch-files to start Stratosphere on Windows and all unit tests passing on Windows.&lt;/li&gt;
&lt;li&gt;Stratosphere is available in Maven Central and Sonatype Snapshot Repository&lt;/li&gt;
&lt;li&gt;Improved build system that supports different Hadoop versions using Maven profiles&lt;/li&gt;
&lt;li&gt;Maven Archetypes for Stratosphere Jobs.&lt;/li&gt;
&lt;li&gt;Stability and Usability improvements with many bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-and-get-started-with-stratosphere-v0.4&quot;&gt;Download and get started with Stratosphere v0.4&lt;/h3&gt;

&lt;p&gt;There are several options for getting started with Stratosphere. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download it on the &lt;a href=&quot;/downloads&quot;&gt;download page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Start your program with the &lt;a href=&quot;/quickstart/&quot;&gt;Quick-start guides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Complete &lt;a href=&quot;/docs/0.4/&quot;&gt;documentation and set-up guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tell-us-what-you-think!&quot;&gt;Tell us what you think!&lt;/h3&gt;

&lt;p&gt;Are you using, or planning to use Stratosphere? Sign up in our &lt;a href=&quot;https://groups.google.com/forum/#!forum/stratosphere-dev&quot;&gt;mailing list&lt;/a&gt; and drop us a line.&lt;/p&gt;

&lt;p&gt;Have you found a bug? &lt;a href=&quot;https://github.com/stratosphere/stratosphere&quot;&gt;Post an issue&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href=&quot;https://twitter.com/stratosphere_eu&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://github.com/stratosphere/stratosphere&quot;&gt;GitHub&lt;/a&gt; to stay in touch with the latest news!&lt;/p&gt;
</description>
<pubDate>Mon, 13 Jan 2014 21:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2014/01/13/stratosphere-release-0.4.html</link>
<guid isPermaLink="true">/news/2014/01/13/stratosphere-release-0.4.html</guid>
</item>

<item>
<title>Stratosphere Version 0.4 Migration Guide</title>
<description>&lt;p&gt;&lt;strong&gt;This guide is intended to help users of previous Stratosphere versions to migrate their programs to the new API of v0.4.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Version &lt;code&gt;0.4-rc1&lt;/code&gt;, &lt;code&gt;0.4&lt;/code&gt; and all newer versions have the new API. If you want to have the most recent version before the code change, please set the version to &lt;code&gt;0.4-alpha.3-SNAPSHOT&lt;/code&gt;. (Note that the &lt;code&gt;0.4-alpha&lt;/code&gt; versions are only available in the snapshot repository).&lt;/p&gt;

&lt;h4 id=&quot;maven-dependencies&quot;&gt;Maven Dependencies&lt;/h4&gt;

&lt;p&gt;Since we also reorganized the Maven project structure, existing programs need to update the Maven dependencies to &lt;code&gt;stratosphere-java&lt;/code&gt; (and &lt;code&gt;stratosphere-clients&lt;/code&gt;, for examples and executors).&lt;/p&gt;

&lt;p&gt;The typical set of Maven dependencies for Stratosphere Java programs is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;       &amp;lt;groupId&amp;gt;eu.stratosphere&amp;lt;/groupId&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-      &amp;lt;artifactId&amp;gt;pact-common&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-      &amp;lt;version&amp;gt;0.4-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      &amp;lt;artifactId&amp;gt;stratosphere-java&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      &amp;lt;version&amp;gt;0.4&amp;lt;/version&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gd&quot;&gt;-      &amp;lt;artifactId&amp;gt;pact-clients&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;-      &amp;lt;version&amp;gt;0.4-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      &amp;lt;artifactId&amp;gt;stratosphere-clients&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      &amp;lt;version&amp;gt;0.4&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;renamed-classes&quot;&gt;Renamed classes&lt;/h4&gt;

&lt;p&gt;We renamed many of the most commonly used classes to make their names more intuitive:&lt;/p&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
    &lt;th&gt;Old Name (before &lt;code&gt;0.4&lt;/code&gt;)&lt;/th&gt;
    &lt;th&gt;New Name (&lt;code&gt;0.4&lt;/code&gt; and after)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;Contract&lt;/td&gt;
        &lt;td&gt;Operator&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;MatchContract&lt;/td&gt;
        &lt;td&gt;JoinOperator&lt;/td&gt;
      &lt;/tr&gt;

          &lt;tr&gt;
        &lt;td&gt;[Map, Reduce, ...]Stub&lt;/td&gt;
        &lt;td&gt;[Map, Reduce, ...]Function&lt;/td&gt;
      &lt;/tr&gt;
          &lt;tr&gt;
        &lt;td&gt;MatchStub&lt;/td&gt;
        &lt;td&gt;JoinFunction&lt;/td&gt;
      &lt;/tr&gt;
          &lt;tr&gt;
        &lt;td&gt;Pact[Integer, Double, ...]&lt;/td&gt;
        &lt;td&gt;IntValue, DoubleValue, ...&lt;/td&gt;
      &lt;/tr&gt;   
      &lt;tr&gt;
        &lt;td&gt;PactRecord&lt;/td&gt;
        &lt;td&gt;Record&lt;/td&gt;
      &lt;/tr&gt;
          &lt;tr&gt;
        &lt;td&gt;PlanAssembler&lt;/td&gt;
        &lt;td&gt;Program&lt;/td&gt;
      &lt;/tr&gt;
          &lt;tr&gt;
        &lt;td&gt;PlanAssemblerDescription&lt;/td&gt;
        &lt;td&gt;ProgramDescription&lt;/td&gt;
      &lt;/tr&gt;
          &lt;tr&gt;
        &lt;td&gt;RecordOutputFormat&lt;/td&gt;
        &lt;td&gt;CsvOutputFormat&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Package names have been adapted as well.
For a complete overview of the renamings, have a look at &lt;a href=&quot;https://github.com/stratosphere/stratosphere/issues/257&quot;&gt;issue #257 on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We suggest for Eclipse user adjust the programs as follows: Delete all old Stratosphere imports, then rename the the classes (&lt;code&gt;PactRecord&lt;/code&gt; to &lt;code&gt;Record&lt;/code&gt; and so on). Finally, use the “Organize Imports” function (&lt;code&gt;CTRL+SHIFT+O&lt;/code&gt;) to choose the right imports. The names should be unique so always pick the classes that are in the &lt;code&gt;eu.stratosphere&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Please contact us in the comments below, on the mailing list or on GitHub if you have any issues migrating to the latest Stratosphere release.&lt;/p&gt;
</description>
<pubDate>Sun, 12 Jan 2014 20:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2014/01/12/0.4-migration-guide.html</link>
<guid isPermaLink="true">/news/2014/01/12/0.4-migration-guide.html</guid>
</item>

<item>
<title>Stratosphere got accepted to the Hadoop Summit Europe in Amsterdam</title>
<description>&lt;p&gt;The Stratosphere team is proud to announce that it is going to present at the &lt;a href=&quot;http://hadoopsummit.org/amsterdam/&quot;&gt;Hadoop Summit 2014 in Amsterdam&lt;/a&gt; on April 2-3. Our talk &amp;quot;Big Data looks tiny from Stratosphere&amp;quot; is part of the &amp;quot;Future of Hadoop&amp;quot; Track. The talk abstract already made it into the top 5 in the &lt;a href=&quot;https://hadoopsummit.uservoice.com/forums/196822-future-of-apache-hadoop/filters/top&quot;&gt;Community Vote&lt;/a&gt; that took place by the end of last year.&lt;/p&gt;
</description>
<pubDate>Fri, 10 Jan 2014 11:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2014/01/10/stratosphere-hadoop-summit.html</link>
<guid isPermaLink="true">/news/2014/01/10/stratosphere-hadoop-summit.html</guid>
</item>

<item>
<title>Stratosphere wins award at Humboldt Innovation Competition &quot;Big Data: Research meets Startups&quot;</title>
<description>    &lt;p&gt; Stratosphere won the second place in
    the &lt;a href=&quot;http://www.humboldt-innovation.de/de/newsdetail/News/View/Forum%2BJunge%2BSpitzenforscher%2BBIG%2BData%2B%2BResearch%2Bmeets%2BStartups-123.html&quot;&gt;competition&lt;/a&gt;
    organized by Humboldt Innovation on &quot;Big Data: Research meets
    Startups,&quot; where several research projects were evaluated by a
    panel of experts from the Berlin startup ecosystem. The award
    includes a monetary prize of 10,000 euros.
    &lt;/p&gt;

    &lt;p&gt;We are extremely excited about this award, as it further
    showcases the relevance of the Stratosphere platform and Big Data
    technology in general for the technology startup world.
    &lt;/p&gt;
</description>
<pubDate>Fri, 13 Dec 2013 15:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2013/12/13/humboldt-innovation-award.html</link>
<guid isPermaLink="true">/news/2013/12/13/humboldt-innovation-award.html</guid>
</item>

<item>
<title>Paper &quot;“All Roads Lead to Rome:” Optimistic Recovery for Distributed Iterative Data Processing&quot; accepted at CIKM 2013</title>
<description>&lt;p&gt;Our paper &amp;quot;“All Roads Lead to Rome:” Optimistic Recovery for Distributed
Iterative Data Processing&amp;quot; authored by Sebastian Schelter, Kostas
Tzoumas, Stephan Ewen and Volker Markl has been accepted accepted at the
ACM International Conference on Information and Knowledge Management
(CIKM 2013) in San Francisco.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Executing data-parallel iterative algorithms on large datasets is
crucial for many advanced analytical applications in the fields of data
mining and machine learning. Current systems for executing iterative
tasks in large clusters typically achieve fault tolerance through
rollback recovery. The principle behind this pessimistic approach is to
periodically checkpoint the algorithm state. Upon failure, the system
restores a consistent state from a previously written checkpoint and
resumes execution from that point.&lt;/p&gt;

&lt;p&gt;We propose an optimistic recovery mechanism using algorithmic
compensations. Our method leverages the robust, self-correcting nature
of a large class of fixpoint algorithms used in data mining and machine
learning, which converge to the correct solution from various
intermediate consistent states. In the case of a failure, we apply a
user-defined compensate function that algorithmically creates such a
consistent state, instead of rolling back to a previous checkpointed
state. Our optimistic recovery does not checkpoint any state and hence
achieves optimal failure-free performance with respect to the overhead
necessary for guaranteeing fault tolerance. We illustrate the
applicability of this approach for three wide classes of problems.
Furthermore, we show how to implement the proposed optimistic recovery
mechanism in a data flow system. Similar to the Combine operator in
MapReduce, our proposed functionality is optional and can be applied to
increase performance without changing the semantics of programs. In an
experimental evaluation on large datasets, we show that our proposed
approach provides optimal failure-free performance. In the absence of
failures our optimistic scheme is able to outperform a pessimistic
approach by a factor of two to five. In presence of failures, our
approach provides fast recovery and outperforms pessimistic approaches
in the majority of cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/papers/optimistic.pdf&quot;&gt;Download the paper [PDF]&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 21 Oct 2013 11:57:18 +0200</pubDate>
<link>http://flink.apache.org/news/2013/10/21/cikm2013-paper.html</link>
<guid isPermaLink="true">/news/2013/10/21/cikm2013-paper.html</guid>
</item>

<item>
<title>Demo Paper &quot;Large-Scale Social-Media Analytics on Stratosphere&quot; Accepted at WWW 2013</title>
<description>   &lt;p&gt;Our demo submission&lt;br /&gt;
&lt;strong&gt;&lt;cite&gt;&quot;Large-Scale Social-Media Analytics on Stratosphere&quot;&lt;/cite&gt;&lt;/strong&gt;&lt;br /&gt;
by Christoph Boden, Marcel Karnstedt, Miriam Fernandez and Volker Markl&lt;br /&gt;
has been accepted for WWW 2013 in Rio de Janeiro, Brazil.&lt;/p&gt;
&lt;p&gt;Visit our demo, and talk to us if you are attending WWW 2013.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;br /&gt;
The importance of social-media platforms and online communities - in business as well as public context - is more and more acknowledged and appreciated by industry and researchers alike. Consequently, a wide range of analytics has been proposed to understand, steer, and exploit the mechanics and laws driving their functionality and creating the resulting benefits. However, analysts usually face significant problems in scaling existing and novel approaches to match the data volume and size of modern online communities. In this work, we propose and demonstrate the usage of the massively parallel data prossesing system Stratosphere, based on second order functions as an extended notion of the MapReduce paradigm, to provide a new level of scalability to such social-media analytics. Based on the popular example of role analysis, we present and illustrate how this massively parallel approach can be leveraged to scale out complex data-mining tasks, while providing a programming approach that eases the formulation of complete analytical workflows.&lt;/p&gt; 
</description>
<pubDate>Wed, 27 Mar 2013 15:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2013/03/27/www-demo-paper.html</link>
<guid isPermaLink="true">/news/2013/03/27/www-demo-paper.html</guid>
</item>

<item>
<title>ICDE 2013 Demo Preview</title>
<description> &lt;p&gt;This is a preview of our demo that will be presented at ICDE 2013 in Brisbane.&lt;br /&gt;
The demo shows how static code analysis can be leveraged to reordered UDF operators in data flow programs.&lt;/p&gt;
&lt;p&gt;Detailed information can be found in our papers which are available on the &lt;a href=&quot;/publications&quot;&gt;publication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/ZYwCMgPXFVE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</description>
<pubDate>Wed, 21 Nov 2012 15:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2012/11/21/previewICDE2013.html</link>
<guid isPermaLink="true">/news/2012/11/21/previewICDE2013.html</guid>
</item>

<item>
<title>Stratosphere Demo Paper Accepted for BTW 2013</title>
<description> &lt;p&gt;Our demo submission&lt;br /&gt;
&lt;strong&gt;&lt;cite&gt;&quot;Applying Stratosphere for Big Data Analytics&quot;&lt;/cite&gt;&lt;/strong&gt;&lt;br /&gt;
has been accepted for BTW 2013 in Magdeburg, Germany.&lt;br /&gt;
The demo focuses on Stratosphere&#39;s query language Meteor, which has been presented in our paper &lt;cite&gt;&quot;Meteor/Sopremo: An Extensible Query Language and Operator Model&quot;&lt;/cite&gt; &lt;a href=&quot;/assets/papers/Sopremo_Meteor BigData.pdf&quot;&gt;[pdf]&lt;/a&gt; at the BigData workshop associated with VLDB 2012 in Istanbul.&lt;/p&gt;
&lt;p&gt;Visit our demo, and talk to us if you are going to attend BTW 2013.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;br /&gt;
Analyzing big data sets as they occur in modern business and science applications requires query languages that allow for the specification of complex data processing tasks. Moreover, these ideally declarative query specifications have to be optimized, parallelized and scheduled for processing on massively parallel data processing platforms. This paper demonstrates the application of Stratosphere to different kinds of Big Data Analytics tasks. Using examples from different application domains, we show how to formulate analytical tasks as Meteor queries and execute them with Stratosphere. These examples include data cleansing and information extraction tasks, and a correlation analysis of microblogging and stock trade volume data that we describe in detail in this paper.&lt;/p&gt;

</description>
<pubDate>Mon, 12 Nov 2012 15:57:18 +0100</pubDate>
<link>http://flink.apache.org/news/2012/11/12/btw2013demo.html</link>
<guid isPermaLink="true">/news/2012/11/12/btw2013demo.html</guid>
</item>

<item>
<title>Stratosphere Demo Accepted for ICDE 2013</title>
<description> &lt;p&gt;Our demo submission&lt;br /&gt;
&lt;strong&gt;&lt;cite&gt;&quot;Peeking into the Optimization of Data Flow Programs with MapReduce-style UDFs&quot;&lt;/cite&gt;&lt;/strong&gt;&lt;br /&gt;
has been accepted for ICDE 2013 in Brisbane, Australia.&lt;br /&gt;
The demo illustrates the contributions of our VLDB 2012 paper &lt;cite&gt;&quot;Opening the Black Boxes in Data Flow Optimization&quot;&lt;/cite&gt; &lt;a href=&quot;/assets/papers/optimizationOfDataFlowsWithUDFs_13.pdf&quot;&gt;[PDF]&lt;/a&gt; and &lt;a href=&quot;/assets/papers/optimizationOfDataFlowsWithUDFs_poster_13.pdf&quot;&gt;[Poster PDF]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Visit our poster, enjoy the demo, and talk to us if you are going to attend ICDE 2013.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;br /&gt;
Data flows are a popular abstraction to define data-intensive processing tasks. In order to support a wide range of use cases, many data processing systems feature MapReduce-style user-defined functions (UDFs). In contrast to UDFs as known from relational DBMS, MapReduce-style UDFs have less strict templates. These templates do not alone provide all the information needed to decide whether they can be reordered with relational operators and other UDFs. However, it is well-known that reordering operators such as filters, joins, and aggregations can yield runtime improvements by orders of magnitude.&lt;br /&gt;
We demonstrate an optimizer for data flows that is able to reorder operators with MapReduce-style UDFs written in an imperative language. Our approach leverages static code analysis to extract information from UDFs which is used to reason about the reorderbility of UDF operators. This information is sufficient to enumerate a large fraction of the search space covered by conventional RDBMS optimizers including filter and aggregation push-down, bushy join orders, and choice of physical execution strategies based on interesting properties.&lt;br /&gt;
We demonstrate our optimizer and a job submission client that allows users to peek step-by-step into each phase of the optimization process: the static code analysis of UDFs, the enumeration of reordered candidate data flows, the generation of physical execution plans, and their parallel execution. For the demonstration, we provide a selection of relational and non-relational data flow programs which highlight the salient features of our approach.&lt;/p&gt;

</description>
<pubDate>Mon, 15 Oct 2012 16:57:18 +0200</pubDate>
<link>http://flink.apache.org/news/2012/10/15/icde2013.html</link>
<guid isPermaLink="true">/news/2012/10/15/icde2013.html</guid>
</item>

<item>
<title>Version 0.2 Released</title>
<description>&lt;p&gt;We are happy to announce that version 0.2 of the Stratosphere System has been released. It has a lot of performance improvements as well as a bunch of exciting new features like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new Sopremo Algebra Layer and the Meteor Scripting Language&lt;/li&gt;
&lt;li&gt;The whole new tuple data model for the PACT API&lt;/li&gt;
&lt;li&gt;Fault tolerance through local checkpoints&lt;/li&gt;
&lt;li&gt;A ton of performance improvements on all layers&lt;/li&gt;
&lt;li&gt;Support for plug-ins on the data flow channel layer&lt;/li&gt;
&lt;li&gt;Many new library classes (for example new Input-/Output-Formats)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of new features, check out the &lt;a href=&quot;https://stratosphere.eu/wiki/doku.php/wiki:changesrelease0.2&quot;&gt;change log&lt;/a&gt;.&lt;/p&gt;</description>
<pubDate>Tue, 21 Aug 2012 16:57:18 +0200</pubDate>
<link>http://flink.apache.org/news/2012/08/21/release02.html</link>
<guid isPermaLink="true">/news/2012/08/21/release02.html</guid>
</item>

</channel>
</rss>
